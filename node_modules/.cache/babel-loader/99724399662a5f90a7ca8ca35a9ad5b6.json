{"ast":null,"code":"var sharedHeaders = \"\";\nvar sharedTailer = \"\";\nexport const convertXml = dataFromForm => {\n  let unformattedArray = formToArray(dataFromForm) || [];\n  sharedHeaders = getHeaders(unformattedArray) || \"\";\n  sharedTailer = getTailer(unformattedArray) || \"\"; //console.log(toCSVArraies(unformattedArray));\n  // var A = [[\"n\", \"sqrt(n)\"]];\n  // for (var j: number = 1; j < 10; ++j) {\n  // \tA.push([j.toString(), Math.sqrt(j).toString()]);\n  // }\n  // var csvRows = [];\n  // for (var i = 0, l = A.length; i < l; ++i) {\n  // \tcsvRows.push(A[i].join(\",\"));\n  // }\n  // var csvString = csvRows.join(\"%0A\");\n  // var a = document.createElement(\"a\");\n  // a.href = \"data:attachment/csv,\" + encodeURIComponent(csvString);\n  // a.target = \"_blank\";\n  // a.download = \"myFile.csv\";\n  // document.body.appendChild(a);\n  // a.click();\n\n  toCSVArraies(unformattedArray).forEach(eachCSV => {\n    console.log(eachCSV);\n    let fileName = getFileName(eachCSV);\n    console.log(fileName);\n    let csvString = eachCSV.join(\"%0A\");\n    console.log(csvString);\n  });\n};\n\nconst getFileName = eachCSV => {\n  return eachCSV[1].split(\",\")[1];\n};\n\nconst formToArray = dataFromForm => {\n  var _xmlDoc$getElementsBy;\n\n  var xmlParser = new DOMParser();\n  var xmlDoc = xmlParser.parseFromString(dataFromForm, \"text/xml\");\n  return (_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"CSVIntervalData\")[0].textContent) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.split(\"\\n\");\n}; //get the header row which start with 100\n\n\nconst getHeaders = xmlDocArr => {\n  let headers;\n  xmlDocArr.forEach(row => {\n    if (row.startsWith(\"100\")) headers = row;\n  });\n  return headers;\n}; //get the tailer row that start with 900\n\n\nconst getTailer = xmlDocArr => {\n  let tailer;\n  xmlDocArr.forEach(row => {\n    if (row.startsWith(\"900\")) tailer = row;\n  });\n  return tailer;\n};\n\nconst toCSVArraies = unformattedRows => {\n  let CSVArraies = [];\n  let seperatedData = seperateRowsToChunks(unformattedRows);\n  seperatedData.forEach(chunk => {\n    let eachCSV = [sharedHeaders];\n    chunk.forEach(row => {\n      //remove the comma in the end\n      row.charAt(row.length - 1) === \",\" ? eachCSV.push(row.substring(0, row.length - 1)) : eachCSV.push(row);\n    });\n    eachCSV.push(sharedTailer);\n    CSVArraies.push(eachCSV);\n  });\n  return CSVArraies;\n}; //seperate the rows by the line which contains 200\n\n\nconst seperateRowsToChunks = unformattedRows => {\n  let chunks = [];\n  let quickPointer = 0;\n  let slowPointer = 0;\n  let validatedRows = validateRows(unformattedRows);\n  validatedRows.forEach((row, i) => {\n    if (row.startsWith(\"200\") || row.includes(\"900\")) {\n      if (quickPointer === 0) {\n        quickPointer = i + 1;\n        slowPointer = i + 1; // to make sure it contains at least 1 row for each 200\n      } else if (i - slowPointer > 1) {\n        quickPointer = i + 1;\n        chunks.push(unformattedRows.slice(slowPointer, quickPointer));\n        slowPointer = i + 1;\n      }\n    }\n  });\n  return chunks;\n}; //to check whether the row is validate\n\n\nconst validateRows = unformattedRows => {\n  let validatedRows = unformattedRows.filter(row => row.startsWith(\"100\") || row.startsWith(\"200\") || row.startsWith(\"300\") || row.startsWith(\"900\"));\n  return validatedRows;\n};","map":{"version":3,"sources":["/Users/shuyun/Desktop/vscode/xml-to-csv/UI/src/services/convertXml.tsx"],"names":["sharedHeaders","sharedTailer","convertXml","dataFromForm","unformattedArray","formToArray","getHeaders","getTailer","toCSVArraies","forEach","eachCSV","console","log","fileName","getFileName","csvString","join","split","xmlParser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","textContent","xmlDocArr","headers","row","startsWith","tailer","unformattedRows","CSVArraies","seperatedData","seperateRowsToChunks","chunk","charAt","length","push","substring","chunks","quickPointer","slowPointer","validatedRows","validateRows","i","includes","slice","filter"],"mappings":"AAAA,IAAIA,aAAqB,GAAG,EAA5B;AACA,IAAIC,YAAoB,GAAG,EAA3B;AAEA,OAAO,MAAMC,UAAU,GAAIC,YAAD,IAA0B;AACnD,MAAIC,gBAAgB,GAAGC,WAAW,CAACF,YAAD,CAAX,IAA6B,EAApD;AACAH,EAAAA,aAAa,GAAGM,UAAU,CAACF,gBAAD,CAAV,IAAgC,EAAhD;AACAH,EAAAA,YAAY,GAAGM,SAAS,CAACH,gBAAD,CAAT,IAA+B,EAA9C,CAHmD,CAInD;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEAI,EAAAA,YAAY,CAACJ,gBAAD,CAAZ,CAA+BK,OAA/B,CAAwCC,OAAD,IAAuB;AAC7DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,QAAIG,QAAQ,GAAGC,WAAW,CAACJ,OAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAEA,QAAIE,SAAS,GAAGL,OAAO,CAACM,IAAR,CAAa,KAAb,CAAhB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,GARD;AASA,CAlCM;;AAoCP,MAAMD,WAAW,GAAIJ,OAAD,IAAuB;AAC1C,SAAOA,OAAO,CAAC,CAAD,CAAP,CAAWO,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAP;AACA,CAFD;;AAIA,MAAMZ,WAAW,GAAIF,YAAD,IAA0B;AAAA;;AAC7C,MAAIe,SAAS,GAAG,IAAIC,SAAJ,EAAhB;AACA,MAAIC,MAAM,GAAGF,SAAS,CAACG,eAAV,CAA0BlB,YAA1B,EAAwC,UAAxC,CAAb;AACA,kCAAOiB,MAAM,CACXE,oBADK,CACgB,iBADhB,EACmC,CADnC,EAELC,WAFF,0DAAO,sBAEQN,KAFR,CAEc,IAFd,CAAP;AAGA,CAND,C,CAQA;;;AACA,MAAMX,UAAU,GAAIkB,SAAD,IAAyB;AAC3C,MAAIC,OAAJ;AACAD,EAAAA,SAAS,CAACf,OAAV,CAAmBiB,GAAD,IAAS;AAC1B,QAAIA,GAAG,CAACC,UAAJ,CAAe,KAAf,CAAJ,EAA2BF,OAAO,GAAGC,GAAV;AAC3B,GAFD;AAGA,SAAOD,OAAP;AACA,CAND,C,CAQA;;;AACA,MAAMlB,SAAS,GAAIiB,SAAD,IAAyB;AAC1C,MAAII,MAAJ;AACAJ,EAAAA,SAAS,CAACf,OAAV,CAAmBiB,GAAD,IAAS;AAC1B,QAAIA,GAAG,CAACC,UAAJ,CAAe,KAAf,CAAJ,EAA2BC,MAAM,GAAGF,GAAT;AAC3B,GAFD;AAGA,SAAOE,MAAP;AACA,CAND;;AAQA,MAAMpB,YAAY,GAAIqB,eAAD,IAA+B;AACnD,MAAIC,UAAsB,GAAG,EAA7B;AACA,MAAIC,aAAa,GAAGC,oBAAoB,CAACH,eAAD,CAAxC;AACAE,EAAAA,aAAa,CAACtB,OAAd,CAAuBwB,KAAD,IAAW;AAChC,QAAIvB,OAAiB,GAAG,CAACV,aAAD,CAAxB;AACAiC,IAAAA,KAAK,CAACxB,OAAN,CAAeiB,GAAD,IAAS;AACtB;AACAA,MAAAA,GAAG,CAACQ,MAAJ,CAAWR,GAAG,CAACS,MAAJ,GAAa,CAAxB,MAA+B,GAA/B,GACGzB,OAAO,CAAC0B,IAAR,CAAaV,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiBX,GAAG,CAACS,MAAJ,GAAa,CAA9B,CAAb,CADH,GAEGzB,OAAO,CAAC0B,IAAR,CAAaV,GAAb,CAFH;AAGA,KALD;AAMAhB,IAAAA,OAAO,CAAC0B,IAAR,CAAanC,YAAb;AACA6B,IAAAA,UAAU,CAACM,IAAX,CAAgB1B,OAAhB;AACA,GAVD;AAWA,SAAOoB,UAAP;AACA,CAfD,C,CAiBA;;;AACA,MAAME,oBAAoB,GAAIH,eAAD,IAA+B;AAC3D,MAAIS,MAAkB,GAAG,EAAzB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,aAAa,GAAGC,YAAY,CAACb,eAAD,CAAhC;AACAY,EAAAA,aAAa,CAAChC,OAAd,CAAsB,CAACiB,GAAD,EAAMiB,CAAN,KAAY;AACjC,QAAIjB,GAAG,CAACC,UAAJ,CAAe,KAAf,KAAyBD,GAAG,CAACkB,QAAJ,CAAa,KAAb,CAA7B,EAAkD;AACjD,UAAIL,YAAY,KAAK,CAArB,EAAwB;AACvBA,QAAAA,YAAY,GAAGI,CAAC,GAAG,CAAnB;AACAH,QAAAA,WAAW,GAAGG,CAAC,GAAG,CAAlB,CAFuB,CAGvB;AACA,OAJD,MAIO,IAAIA,CAAC,GAAGH,WAAJ,GAAkB,CAAtB,EAAyB;AAC/BD,QAAAA,YAAY,GAAGI,CAAC,GAAG,CAAnB;AACAL,QAAAA,MAAM,CAACF,IAAP,CAAYP,eAAe,CAACgB,KAAhB,CAAsBL,WAAtB,EAAmCD,YAAnC,CAAZ;AACAC,QAAAA,WAAW,GAAGG,CAAC,GAAG,CAAlB;AACA;AACD;AACD,GAZD;AAaA,SAAOL,MAAP;AACA,CAnBD,C,CAqBA;;;AACA,MAAMI,YAAY,GAAIb,eAAD,IAA+B;AACnD,MAAIY,aAAa,GAAGZ,eAAe,CAACiB,MAAhB,CAClBpB,GAAD,IACCA,GAAG,CAACC,UAAJ,CAAe,KAAf,KACAD,GAAG,CAACC,UAAJ,CAAe,KAAf,CADA,IAEAD,GAAG,CAACC,UAAJ,CAAe,KAAf,CAFA,IAGAD,GAAG,CAACC,UAAJ,CAAe,KAAf,CALkB,CAApB;AAOA,SAAOc,aAAP;AACA,CATD","sourcesContent":["var sharedHeaders: string = \"\";\nvar sharedTailer: string = \"\";\n\nexport const convertXml = (dataFromForm: string) => {\n\tlet unformattedArray = formToArray(dataFromForm) || [];\n\tsharedHeaders = getHeaders(unformattedArray) || \"\";\n\tsharedTailer = getTailer(unformattedArray) || \"\";\n\t//console.log(toCSVArraies(unformattedArray));\n\n\t// var A = [[\"n\", \"sqrt(n)\"]];\n\t// for (var j: number = 1; j < 10; ++j) {\n\t// \tA.push([j.toString(), Math.sqrt(j).toString()]);\n\t// }\n\t// var csvRows = [];\n\n\t// for (var i = 0, l = A.length; i < l; ++i) {\n\t// \tcsvRows.push(A[i].join(\",\"));\n\t// }\n\n\t// var csvString = csvRows.join(\"%0A\");\n\t// var a = document.createElement(\"a\");\n\t// a.href = \"data:attachment/csv,\" + encodeURIComponent(csvString);\n\t// a.target = \"_blank\";\n\t// a.download = \"myFile.csv\";\n\n\t// document.body.appendChild(a);\n\t// a.click();\n\n\ttoCSVArraies(unformattedArray).forEach((eachCSV: string[]) => {\n\t\tconsole.log(eachCSV);\n\n\t\tlet fileName = getFileName(eachCSV);\n\t\tconsole.log(fileName);\n\n\t\tlet csvString = eachCSV.join(\"%0A\");\n\t\tconsole.log(csvString);\n\t});\n};\n\nconst getFileName = (eachCSV: string[]) => {\n\treturn eachCSV[1].split(\",\")[1];\n};\n\nconst formToArray = (dataFromForm: string) => {\n\tvar xmlParser = new DOMParser();\n\tvar xmlDoc = xmlParser.parseFromString(dataFromForm, \"text/xml\");\n\treturn xmlDoc\n\t\t.getElementsByTagName(\"CSVIntervalData\")[0]\n\t\t.textContent?.split(\"\\n\");\n};\n\n//get the header row which start with 100\nconst getHeaders = (xmlDocArr: string[]) => {\n\tlet headers;\n\txmlDocArr.forEach((row) => {\n\t\tif (row.startsWith(\"100\")) headers = row;\n\t});\n\treturn headers;\n};\n\n//get the tailer row that start with 900\nconst getTailer = (xmlDocArr: string[]) => {\n\tlet tailer;\n\txmlDocArr.forEach((row) => {\n\t\tif (row.startsWith(\"900\")) tailer = row;\n\t});\n\treturn tailer;\n};\n\nconst toCSVArraies = (unformattedRows: string[]) => {\n\tlet CSVArraies: string[][] = [];\n\tlet seperatedData = seperateRowsToChunks(unformattedRows);\n\tseperatedData.forEach((chunk) => {\n\t\tlet eachCSV: string[] = [sharedHeaders];\n\t\tchunk.forEach((row) => {\n\t\t\t//remove the comma in the end\n\t\t\trow.charAt(row.length - 1) === \",\"\n\t\t\t\t? eachCSV.push(row.substring(0, row.length - 1))\n\t\t\t\t: eachCSV.push(row);\n\t\t});\n\t\teachCSV.push(sharedTailer);\n\t\tCSVArraies.push(eachCSV);\n\t});\n\treturn CSVArraies;\n};\n\n//seperate the rows by the line which contains 200\nconst seperateRowsToChunks = (unformattedRows: string[]) => {\n\tlet chunks: string[][] = [];\n\tlet quickPointer = 0;\n\tlet slowPointer = 0;\n\tlet validatedRows = validateRows(unformattedRows);\n\tvalidatedRows.forEach((row, i) => {\n\t\tif (row.startsWith(\"200\") || row.includes(\"900\")) {\n\t\t\tif (quickPointer === 0) {\n\t\t\t\tquickPointer = i + 1;\n\t\t\t\tslowPointer = i + 1;\n\t\t\t\t// to make sure it contains at least 1 row for each 200\n\t\t\t} else if (i - slowPointer > 1) {\n\t\t\t\tquickPointer = i + 1;\n\t\t\t\tchunks.push(unformattedRows.slice(slowPointer, quickPointer));\n\t\t\t\tslowPointer = i + 1;\n\t\t\t}\n\t\t}\n\t});\n\treturn chunks;\n};\n\n//to check whether the row is validate\nconst validateRows = (unformattedRows: string[]) => {\n\tlet validatedRows = unformattedRows.filter(\n\t\t(row) =>\n\t\t\trow.startsWith(\"100\") ||\n\t\t\trow.startsWith(\"200\") ||\n\t\t\trow.startsWith(\"300\") ||\n\t\t\trow.startsWith(\"900\")\n\t);\n\treturn validatedRows;\n};\n"]},"metadata":{},"sourceType":"module"}