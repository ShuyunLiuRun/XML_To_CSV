{"ast":null,"code":"export const convertXml = dataFromForm => {\n  console.log(formToArray(dataFromForm) || []);\n};\n\nconst formToArray = dataFromForm => {\n  var _xmlDoc$getElementsBy;\n\n  var xmlParser = new DOMParser();\n  var xmlDoc = xmlParser.parseFromString(dataFromForm, \"text/xml\");\n  return (_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"CSVIntervalData\")[0].textContent) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.split(\"\\n\");\n}; //get the header row which contains 100\n\n\nconst getHeaders = xmlDocArr => {\n  let header;\n  xmlDocArr.forEach(row => {\n    if (row.includes(\"100\")) header = row.split(\",\");\n  });\n  return header;\n};\n\nconst toCSVarray = unformattedRows => {\n  let CSVArray = [];\n  let seperatedArr = seperateRowsToChunks(unformattedRows);\n}; //seperate the rows by the line which contains 200\n\n\nconst seperateRowsToChunks = unformattedRows => {\n  let chunks = [];\n  let quickPointer = 0;\n  let slowPointer = 0;\n  unformattedRows.forEach((row, i) => {\n    if (row.includes(\"200\")) {\n      if (quickPointer === 0) {\n        quickPointer = i;\n        slowPointer = i;\n      } else {\n        quickPointer = i;\n        chunks.push(unformattedRows.slice(slowPointer, quickPointer));\n        slowPointer = i;\n      }\n    }\n  });\n};\n\nvar A = [[\"n\", \"sqrt(n)\"]];\n\nfor (var j = 1; j < 10; ++j) {\n  A.push([j.toString(), Math.sqrt(j).toString()]);\n}\n\nvar csvRows = [];\n\nfor (var i = 0, l = A.length; i < l; ++i) {\n  csvRows.push(A[i].join(\",\"));\n}\n\nvar csvString = csvRows.join(\"%0A\");\nvar a = document.createElement(\"a\");\na.href = \"data:attachment/csv,\" + encodeURIComponent(csvString);\na.target = \"_blank\";\na.download = \"myFile.csv\";\ndocument.body.appendChild(a);\na.click();","map":{"version":3,"sources":["/Users/shuyun/Desktop/vscode/xml-to-csv/UI/src/services/convertXml.tsx"],"names":["convertXml","dataFromForm","console","log","formToArray","xmlParser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","textContent","split","getHeaders","xmlDocArr","header","forEach","row","includes","toCSVarray","unformattedRows","CSVArray","seperatedArr","seperateRowsToChunks","chunks","quickPointer","slowPointer","i","push","slice","A","j","toString","Math","sqrt","csvRows","l","length","join","csvString","a","document","createElement","href","encodeURIComponent","target","download","body","appendChild","click"],"mappings":"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","sourcesContent":["export const convertXml = (dataFromForm: string) => {\n\tconsole.log(formToArray(dataFromForm) || []);\n};\n\nconst formToArray = (dataFromForm: string) => {\n\tvar xmlParser = new DOMParser();\n\tvar xmlDoc = xmlParser.parseFromString(dataFromForm, \"text/xml\");\n\treturn xmlDoc\n\t\t.getElementsByTagName(\"CSVIntervalData\")[0]\n\t\t.textContent?.split(\"\\n\");\n};\n\n//get the header row which contains 100\nconst getHeaders = (xmlDocArr: string[]) => {\n\tlet header;\n\txmlDocArr.forEach((row) => {\n\t\tif (row.includes(\"100\")) header = row.split(\",\");\n\t});\n\treturn header;\n};\n\nconst toCSVarray = (unformattedRows: string[]) => {\n\tlet CSVArray = [];\n\tlet seperatedArr = seperateRowsToChunks(unformattedRows);\n};\n\n//seperate the rows by the line which contains 200\nconst seperateRowsToChunks = (unformattedRows: string[]) => {\n\tlet chunks = [];\n\tlet quickPointer = 0;\n\tlet slowPointer = 0;\n\tunformattedRows.forEach((row, i) => {\n\t\tif (row.includes(\"200\")) {\n\t\t\tif (quickPointer === 0) {\n\t\t\t\tquickPointer = i;\n\t\t\t\tslowPointer = i;\n\t\t\t} else {\n\t\t\t\tquickPointer = i;\n\t\t\t\tchunks.push(unformattedRows.slice(slowPointer, quickPointer));\n\t\t\t\tslowPointer = i;\n\t\t\t}\n\t\t}\n\t});\n};\n\nvar A = [[\"n\", \"sqrt(n)\"]];\nfor (var j: number = 1; j < 10; ++j) {\n\tA.push([j.toString(), Math.sqrt(j).toString()]);\n}\nvar csvRows = [];\n\nfor (var i = 0, l = A.length; i < l; ++i) {\n\tcsvRows.push(A[i].join(\",\"));\n}\n\nvar csvString = csvRows.join(\"%0A\");\nvar a = document.createElement(\"a\");\na.href = \"data:attachment/csv,\" + encodeURIComponent(csvString);\na.target = \"_blank\";\na.download = \"myFile.csv\";\n\ndocument.body.appendChild(a);\na.click();\n"]},"metadata":{},"sourceType":"module"}